{"ast":null,"code":"var _jsxFileName = \"/Users/mcn4virginia.edu/Desktop/employee-directory/src/components/Table.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useTable } from 'react-table'; // import employee from './employee.json';\n// Create a state\n// const [ filterInput, setFilterInput ] = useState('');\n// // Update the state when input changes\n// const handleFilterChange = (e) => {\n// \tconst value = e.target.value || undefined;\n// \tsetFilter('employee.location.city', value); // Update the employee.location.city filter. Now our table will filter and show only the rows which have a matching value\n// \tsetFilterInput(value);\n// \tsetFilterInput(value);\n// };\n// //where does this go?????\n// <input value={filterInput} onChange={handleFilterChange} placeholder={'Search city'} />;\n// Table header styling and props to allow sorting\n//**********Don't have header */\n//Where the fuck does this go?\n//{\n\n/* <th\n {...column.getHeaderProps(column.getSortByToggleProps())}\n className={\n   column.isSorted\n     ? column.isSortedDesc\n       ? \"sort-desc\"\n       : \"sort-asc\"\n     : \"\"\n }\n>\n {column.render(\"Header\")}\n</th> */\n//}\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Table({\n  columns,\n  data\n}) {\n  _s();\n\n  const {\n    getTableProps,\n    // table props from react-table\n    getTableBodyProps,\n    // table body props from react-table\n    // headerGroups, // headerGroups, if your table has groupings\n    rows,\n    // rows for the table based on the data passed\n    prepareRow // Prepare the row (this function needs to be called for each row before getting the row props)\n\n  } = useTable({\n    columns,\n    data\n  }); // useFilters; // Adding the useFilters Hook to the table\n  // // You can add as many Hooks as you want. Check the documentation for details. You can even add custom Hooks for react-table here\n  // useSortBy; // This plugin Hook will help to sort our table columns\n\n  return /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: \"Employee Directory\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n      children: rows.map((row, i) => {\n        prepareRow(row); // This line is necessary to prepare the rows and get the row props from react-table dynamically\n        // Each row can be rendered directly as a string using the react-table render method\n\n        return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n          children: row.cells.map(cell => {\n            return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n              children: cell.render('Cell')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 16\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Table, \"CAQ7ZPf/4g6KLWkFb9njLGGErUo=\", false, function () {\n  return [useTable];\n});\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/Users/mcn4virginia.edu/Desktop/employee-directory/src/components/Table.js"],"names":["React","useTable","Table","columns","data","getTableProps","getTableBodyProps","rows","prepareRow","map","row","i","getRowProps","cells","cell","getCellProps","render"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB,C,CACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;;AACC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA,SAASC,KAAT,CAAe;AAAEC,EAAAA,OAAF;AAAWC,EAAAA;AAAX,CAAf,EAAkC;AAAA;;AACjC,QAAM;AACLC,IAAAA,aADK;AACU;AACfC,IAAAA,iBAFK;AAEc;AACnB;AACAC,IAAAA,IAJK;AAIC;AACNC,IAAAA,UALK,CAKM;;AALN,MAMFP,QAAQ,CAAC;AACZE,IAAAA,OADY;AAEZC,IAAAA;AAFY,GAAD,CANZ,CADiC,CAYjC;AACA;AACA;;AAEA,sBACC,sBAAWC,aAAa,EAAxB;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAGC,sBAAWC,iBAAiB,EAA5B;AAAA,gBACEC,IAAI,CAACE,GAAL,CAAS,CAACC,GAAD,EAAMC,CAAN,KAAY;AACrBH,QAAAA,UAAU,CAACE,GAAD,CAAV,CADqB,CACJ;AAEjB;;AACA,4BACC,mBAAQA,GAAG,CAACE,WAAJ,EAAR;AAAA,oBACEF,GAAG,CAACG,KAAJ,CAAUJ,GAAV,CAAeK,IAAD,IAAU;AACxB,gCAAO,mBAAQA,IAAI,CAACC,YAAL,EAAR;AAAA,wBAA8BD,IAAI,CAACE,MAAL,CAAY,MAAZ;AAA9B;AAAA;AAAA;AAAA;AAAA,oBAAP;AACA,WAFA;AADF;AAAA;AAAA;AAAA;AAAA,gBADD;AAOA,OAXA;AADF;AAAA;AAAA;AAAA;AAAA,YAHD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAoBA;;GApCQd,K;UAOJD,Q;;;KAPIC,K;AAsCT,eAAeA,KAAf","sourcesContent":["import React from 'react';\nimport { useTable } from 'react-table';\n// import employee from './employee.json';\n\n// Create a state\n// const [ filterInput, setFilterInput ] = useState('');\n\n// // Update the state when input changes\n// const handleFilterChange = (e) => {\n// \tconst value = e.target.value || undefined;\n// \tsetFilter('employee.location.city', value); // Update the employee.location.city filter. Now our table will filter and show only the rows which have a matching value\n// \tsetFilterInput(value);\n// \tsetFilterInput(value);\n// };\n\n// //where does this go?????\n// <input value={filterInput} onChange={handleFilterChange} placeholder={'Search city'} />;\n// Table header styling and props to allow sorting\n\n//**********Don't have header */\n//Where the fuck does this go?\n\n//{\n\t/* <th\n  {...column.getHeaderProps(column.getSortByToggleProps())}\n  className={\n    column.isSorted\n      ? column.isSortedDesc\n        ? \"sort-desc\"\n        : \"sort-asc\"\n      : \"\"\n  }\n>\n  {column.render(\"Header\")}\n</th> */\n//}\nfunction Table({ columns, data }) {\n\tconst {\n\t\tgetTableProps, // table props from react-table\n\t\tgetTableBodyProps, // table body props from react-table\n\t\t// headerGroups, // headerGroups, if your table has groupings\n\t\trows, // rows for the table based on the data passed\n\t\tprepareRow // Prepare the row (this function needs to be called for each row before getting the row props)\n\t} = useTable({\n\t\tcolumns,\n\t\tdata\n\t});\n\n\t// useFilters; // Adding the useFilters Hook to the table\n\t// // You can add as many Hooks as you want. Check the documentation for details. You can even add custom Hooks for react-table here\n\t// useSortBy; // This plugin Hook will help to sort our table columns\n\n\treturn (\n\t\t<table {...getTableProps()}>\n\t\t\t<thead>Employee Directory</thead>\n\n\t\t\t<tbody {...getTableBodyProps()}>\n\t\t\t\t{rows.map((row, i) => {\n\t\t\t\t\tprepareRow(row); // This line is necessary to prepare the rows and get the row props from react-table dynamically\n\n\t\t\t\t\t// Each row can be rendered directly as a string using the react-table render method\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<tr {...row.getRowProps()}>\n\t\t\t\t\t\t\t{row.cells.map((cell) => {\n\t\t\t\t\t\t\t\treturn <td {...cell.getCellProps()}>{cell.render('Cell')}</td>;\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</tbody>\n\t\t</table>\n\t);\n}\n\nexport default Table;\n"]},"metadata":{},"sourceType":"module"}